{"version":3,"sources":["2-双数相加.js"],"names":["ListNode","val","next","addTwoNumbers","l1","l2","console","log","listToStr","list","str","split","reverse","join","strToList","arr","listNode","shift","reduce","result","item","ln","add","str1","str2","temp","length","pop","total","time","timeEnd"],"mappings":"AAAA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,OAAKA,GAAL,GAAWA,GAAX;AACA,OAAKC,IAAL,GAAY,IAAZ;AACD;AAED;;;;;;;AAKA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,EAAV,EAAcC,EAAd,EAAkB;AACpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,EAAlB;;AAEA,MAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAU;AAC1B,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIT,GAAG,GAAG,EAAV;;AACA,WAAMQ,IAAN,EAAY;AACVR,MAAAA,GAAG,GAAGQ,IAAI,CAACR,GAAX;AACAQ,MAAAA,IAAI,GAAGA,IAAI,CAACP,IAAL,IAAa,IAApB;AACAQ,MAAAA,GAAG,IAAIT,GAAP;AACD;;AACD,WAAOS,GAAG,CAACC,KAAJ,CAAU,EAAV,EAAcC,OAAd,GAAwBC,IAAxB,CAA6B,EAA7B,CAAP;AACD,GATD;;AAWA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACJ,GAAD,EAAS;AACzB,QAAIK,GAAG,GAAGL,GAAG,CAACC,KAAJ,CAAU,EAAV,CAAV;AACA,QAAIK,QAAQ,GAAG,IAAIhB,QAAJ,CAAae,GAAG,CAACE,KAAJ,EAAb,CAAf;AACA,WAAOF,GAAG,CAACG,MAAJ,CAAW,UAACC,MAAD,EAASC,IAAT,EAAkB;AAClC,UAAIC,EAAE,GAAG,IAAIrB,QAAJ,CAAaoB,IAAb,CAAT;AACAC,MAAAA,EAAE,CAACnB,IAAH,GAAUiB,MAAV;AACA,aAAOE,EAAP;AACD,KAJM,EAIJL,QAJI,CAAP;AAKD,GARD;;AAWA,MAAMM,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAOC,IAAP,EAAgB;AAC1B,QAAIL,MAAM,GAAG,EAAb;AACA,QAAIM,IAAI,GAAG,CAAX;AACAF,IAAAA,IAAI,GAAGA,IAAI,CAACZ,KAAL,CAAW,EAAX,CAAP;AACAa,IAAAA,IAAI,GAAGA,IAAI,CAACb,KAAL,CAAW,EAAX,CAAP;;AACA,WAAMY,IAAI,CAACG,MAAL,IAAeF,IAAI,CAACE,MAApB,IAA8BD,IAApC,EAA0C;AACxCA,MAAAA,IAAI,IAAI,CAAC,CAACF,IAAI,CAACI,GAAL,EAAF,GAAe,CAAC,CAACH,IAAI,CAACG,GAAL,EAAzB;AACAR,MAAAA,MAAM,GAAGM,IAAI,GAAG,EAAP,GAAYN,MAArB;AACAM,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACD;;AACD,WAAON,MAAP;AACD,GAXD;;AAaA,MAAIS,KAAK,GAAGN,GAAG,CAACd,SAAS,CAACJ,EAAD,CAAV,EAAgBI,SAAS,CAACH,EAAD,CAAzB,CAAf;AACA,SAAOS,SAAS,CAACc,KAAD,CAAhB;AACD,CAxCD;;AA0CAtB,OAAO,CAACuB,IAAR;AACAvB,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,aAAa,CAAC,IAAIH,QAAJ,CAAa,GAAb,CAAD,EAAoB,IAAIA,QAAJ,CAAa,GAAb,CAApB,CAA1C;AACAM,OAAO,CAACwB,OAAR","file":"2-双数相加.51e52d4b.js","sourceRoot":"..","sourcesContent":["// 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n\n// 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n\n// 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n\n// 示例：\n\n// 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n// 输出：7 -> 0 -> 8\n// 原因：342 + 465 = 807\n\n\n// 来源：力扣（LeetCode）\n// 链接：https://leetcode-cn.com/problems/add-two-numbers\n// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\nfunction ListNode(val) {\n  this.val = val;\n  this.next = null;\n}\n\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function (l1, l2) {\n  console.log('l1', l1)\n\n  const listToStr = (list) => {\n    let str = '';\n    let val = '';\n    while(list) {\n      val = list.val;\n      list = list.next || null;\n      str += val\n    }\n    return str.split('').reverse().join('')\n  }\n\n  const strToList = (str) => {\n    let arr = str.split('')\n    let listNode = new ListNode(arr.shift())\n    return arr.reduce((result, item) => {\n      let ln = new ListNode(item);\n      ln.next = result;\n      return ln\n    }, listNode)\n  }\n\n  \n  const add = (str1, str2) => {\n    let result = '';\n    let temp = 0;\n    str1 = str1.split('');\n    str2 = str2.split('');\n    while(str1.length || str2.length || temp) {\n      temp += ~~str1.pop() + ~~str2.pop();\n      result = temp % 10 + result;\n      temp = temp > 9;\n    }\n    return result\n  }\n  \n  let total = add(listToStr(l1), listToStr(l2))\n  return strToList(total)\n}\n\nconsole.time()\nconsole.log('addTwoNumbers', addTwoNumbers(new ListNode(342), new ListNode(564)))\nconsole.timeEnd()"]}